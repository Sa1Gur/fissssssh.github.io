<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>development on fissssssh</title><link>https://fissssssh.com/categories/development/</link><description>Recent content in development on fissssssh</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 14 Dec 2022 22:25:34 +0800</lastBuildDate><atom:link href="https://fissssssh.com/categories/development/index.xml" rel="self" type="application/rss+xml"/><item><title>ASP.NET Core 中使用 Dapr 发布订阅</title><link>https://fissssssh.com/posts/dapr-publish-and-subscription-in-asp-net-core/</link><pubDate>Wed, 14 Dec 2022 22:25:34 +0800</pubDate><guid>https://fissssssh.com/posts/dapr-publish-and-subscription-in-asp-net-core/</guid><description>定义 subpub 组件 我们使用 Dapr 初始化时安装的 redis 作为 pubsub 的实现
创建文件 ~/.dapr/components/pubsub.yaml （Windows 用户为 %USERPROFILE%\.dapr\components\pubsub.yaml ），内容如下
Dapr 初始化后 ~/.dapr/components 文件夹会自动创建，里面有一个 statestore.yaml 的组件定义。如果没有该文件夹也不用担心，手动创建即可
apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: pubsub spec: type: pubsub.redis version: v1 metadata: - name: redisHost value: localhost:6379 - name: redisPassword value: &amp;#34;&amp;#34; 创建项目 创建 ASP.NET Core WebAPI 项目
$ dotnet new webapi --no-openapi --no-https 安装 Dapr SDK
dotnet CLI
$ dotnet add package Dapr.AspNetCore 程序包管理器控制台
Install-Package Dapr.AspNetCore 也可以在 Visual Studio 的 Nuget 包管理器中搜索安装</description></item><item><title>安装 Dapr</title><link>https://fissssssh.com/posts/dapr/install/</link><pubDate>Wed, 14 Dec 2022 16:39:07 +0800</pubDate><guid>https://fissssssh.com/posts/dapr/install/</guid><description>前置条件 Dapr 可以脱离 Docker 运行，但不在本篇所讲范围内，本篇内容中的操作都是基于 Docker 安装完成并运行正常的情况下的操作
Docker Docker 安装官方文档描述十分清晰。 Windows 用户推荐安装带界面的 Docker Desktop（更符合 Windows 人的操作习惯吧），Linux 用户安装 Docker Engine 即可。
开始安装 Dapr 的安装分为两部分：
安装 Dapr CLI 安装 Dapr Runtime 有两种方式可以进行安装，在线安装方式会去 github 下载对应的资源，网络不好的同学可以使用离线安装的方式
在线安装 安装 Dapr CLI
Dapr 官网有各个操作系统详细的安装方法，这里讲一下通用的二进制安装方法：
首先去 Dapr CLI 的发布页（目前最新是 1.9.1 版本）下载对应操作系统版本的压缩包，命名格式为dapr_&amp;lt;os_name&amp;gt;_&amp;lt;cpu_arch&amp;gt;.(tar.gz|zip)，如果操作系统或者 CPU 架构没选对，则 Dapr CLI 无法正常运行 通常来说 Windows 用户下载dapr_windows_amd64.zip，Linux 用户下载dapr_linux_amd64.tar.gz
解压到任意文件夹，并将该文件夹路径加入PATH环境变量 Linux 用户可直接创建软连接到/usr/local/bin/dapr， Windows 用户推荐将文件解压至%USERPROFILE%\bin\文件夹，并将%USERPROFILE%\bin\添加到PATH环境变量中，后续有其他的可执行文件也可以放入该文件夹，不用再动环境变量
打开控制台或者终端输入dapr，如果有相关的内容输出则安装成功 安装 Dapr Runtime
安装 Dapr Runtime 也叫初始化 Dapr。
本地 Dapr 环境的初始化很简单， 只需要dapr init即可</description></item><item><title>Visual Studio 2022 插件推荐</title><link>https://fissssssh.com/posts/recommended-visual-studio-plugins/</link><pubDate>Thu, 07 Jul 2022 16:35:39 +0800</pubDate><guid>https://fissssssh.com/posts/recommended-visual-studio-plugins/</guid><description>引言 插件可以提高开发人员的生产力，好的插件可以让开发事半功倍，下面推荐一些自己用的 Visual Studio 插件（免费！）
插件列表 以下所有插件在 Visual Studio 2022 运行正常，若版本不兼容请移步 Visual Studio Marketplace 查看是否有对应版本
插件名称 描述 CodeMaid VS2022 代码清理插件，其中有一个码锹窗口深得我心 Output enhancer 输出窗口使用彩色优化，错误为红色，警告为黄色等 Code alignment 代码对齐，让你的某些代码按照某个字符垂直对齐 Double-Click Maximize 2022 双击最大化，不用先拖出来再放大，再次双击即可回归原位 Time Stamp Margin 2022 在调试窗口左边增加一列时间戳 Shrink Empty Lines 2022 压缩空行和没有字符的行（只有括号的行）的高度，从而在屏幕上显示更多代码 Solution Error Visualizer 2022 当某个文件有错误或者警告时，在解决方案资源管理器中显示（其父目录也会显示） Match Margin 2022 在滚动条上显示当前选中单词的位置</description></item><item><title>如何在 ASP.NET Core WEB API 中启动后台任务</title><link>https://fissssssh.com/posts/how-to-start-backgroud-task-in-asp_net_core_webapi/</link><pubDate>Mon, 27 Jun 2022 20:30:49 +0800</pubDate><guid>https://fissssssh.com/posts/how-to-start-backgroud-task-in-asp_net_core_webapi/</guid><description>引言 有时候我们可能想在接口中开启一个后台任务，就像这样:
public class MyController : Controller { private readonly MyDependency _dep; public MyController(MyDependency d) { _dep = d; } public IActionResult MyAction() { Task.Run(() =&amp;gt; _dep.DoHeavyAsyncWork()); return Json(&amp;#34;Your job is started!&amp;#34;); } } 事实上，这段代码很符合语义，接口也能成功返回。 但是其中有一个潜在问题，随着return语句响应本次请求，ASP.NET Core会开始释放本次请求的依赖，比如控制器和控制器依赖的各种服务……，这就会导致Task.Run语句中的所依赖的定义在控制器中的服务会被释放掉，这可能会导致一些未知的问题。这些潜在问题可能会让你的应用程序随时爆炸！
让后台任务拥有自己的生存期 为了保证后台服务的依赖不随控制器释放而释放，我们需要定义一个新的服务并将其注册为单例服务，因为单例服务永远不会被释放。
创建一个名为CannonService的类
CannonService.cs
public class CannonService { private readonly ILogger&amp;lt;CannonService&amp;gt; _logger; private readonly IServiceProvider _serviceProvider; public CannonService(ILogger&amp;lt;CannonService&amp;gt; logger, IServiceProvider serviceProvider) { _logger = logger; _serviceProvider = serviceProvider; } public void Fire(Delegate dg, Action&amp;lt;Exception&amp;gt;?</description></item></channel></rss>