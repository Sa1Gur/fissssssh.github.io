<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>dapr on fissssssh</title><link>https://fissssssh.com/tags/dapr/</link><description>Recent content in dapr on fissssssh</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 05 Jan 2023 15:40:18 +0800</lastBuildDate><atom:link href="https://fissssssh.com/tags/dapr/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Visual Studio 调试 dapr 应用程序</title><link>https://fissssssh.com/posts/debug-program-start-by-dapr-with-visual-studio/</link><pubDate>Thu, 05 Jan 2023 15:40:18 +0800</pubDate><guid>https://fissssssh.com/posts/debug-program-start-by-dapr-with-visual-studio/</guid><description>dapr 应用程序是一个多进程程序，对于 Visual Studio 来说可能比较困难
这里介绍两种方法来使用 Visual Studio 调试 dapr 应用程序
使用 VS 扩展 附加进程调试 使用 VS 扩展 参考 https://github.com/dapr/dotnet-sdk/issues/401#issuecomment-747563695
准备条件 安装 PowerShell 7 / Core 也可使用 dotnet tool install --global PowerShell 进行安装
安装 VS 扩展 Microsoft Child Process Debugging Power Tool 2022 调试准备 编辑launchSettings.json
{ &amp;#34;$schema&amp;#34;: &amp;#34;https://json.schemastore.org/launchsettings.json&amp;#34;, &amp;#34;profiles&amp;#34;: { &amp;#34;WebApplication1&amp;#34;: { &amp;#34;commandName&amp;#34;: &amp;#34;Project&amp;#34;, &amp;#34;dotnetRunMessages&amp;#34;: true, &amp;#34;launchBrowser&amp;#34;: true, &amp;#34;launchUrl&amp;#34;: &amp;#34;weatherforecast&amp;#34;, &amp;#34;applicationUrl&amp;#34;: &amp;#34;http://localhost:5217&amp;#34;, &amp;#34;environmentVariables&amp;#34;: { &amp;#34;ASPNETCORE_ENVIRONMENT&amp;#34;: &amp;#34;Development&amp;#34; } }, &amp;#34;Dapr-PWSH&amp;#34;: { &amp;#34;commandName&amp;#34;: &amp;#34;Executable&amp;#34;, &amp;#34;executablePath&amp;#34;: &amp;#34;pwsh&amp;#34;, &amp;#34;commandLineArgs&amp;#34;: &amp;#34;-Command \&amp;#34;dapr run -a myapp -p 5217 -- dotnet run --no-build\&amp;#34;&amp;#34;, &amp;#34;workingDirectory&amp;#34;: &amp;#34;.</description></item><item><title>ASP.NET Core 中使用 Dapr 发布订阅</title><link>https://fissssssh.com/posts/dapr-publish-and-subscription-in-asp-net-core/</link><pubDate>Wed, 14 Dec 2022 22:25:34 +0800</pubDate><guid>https://fissssssh.com/posts/dapr-publish-and-subscription-in-asp-net-core/</guid><description>定义 subpub 组件 我们使用 Dapr 初始化时安装的 redis 作为 pubsub 的实现
创建文件 ~/.dapr/components/pubsub.yaml （Windows 用户为 %USERPROFILE%\.dapr\components\pubsub.yaml ），内容如下
Dapr 初始化后 ~/.dapr/components 文件夹会自动创建，里面有一个 statestore.yaml 的组件定义。如果没有该文件夹也不用担心，手动创建即可
apiVersion: dapr.io/v1alpha1 kind: Component metadata: name: pubsub spec: type: pubsub.redis version: v1 metadata: - name: redisHost value: localhost:6379 - name: redisPassword value: &amp;#34;&amp;#34; 创建项目 创建 ASP.NET Core WebAPI 项目
$ dotnet new webapi --no-openapi --no-https 安装 Dapr SDK
dotnet CLI
$ dotnet add package Dapr.AspNetCore 程序包管理器控制台
Install-Package Dapr.AspNetCore 也可以在 Visual Studio 的 Nuget 包管理器中搜索安装</description></item><item><title>安装 Dapr</title><link>https://fissssssh.com/posts/dapr/install/</link><pubDate>Wed, 14 Dec 2022 16:39:07 +0800</pubDate><guid>https://fissssssh.com/posts/dapr/install/</guid><description>前置条件 Dapr 可以脱离 Docker 运行，但不在本篇所讲范围内，本篇内容中的操作都是基于 Docker 安装完成并运行正常的情况下的操作
Docker Docker 安装官方文档描述十分清晰。 Windows 用户推荐安装带界面的 Docker Desktop（更符合 Windows 人的操作习惯吧），Linux 用户安装 Docker Engine 即可。
开始安装 Dapr 的安装分为两部分：
安装 Dapr CLI 安装 Dapr Runtime 有两种方式可以进行安装，在线安装方式会去 github 下载对应的资源，网络不好的同学可以使用离线安装的方式
在线安装 安装 Dapr CLI
Dapr 官网有各个操作系统详细的安装方法，这里讲一下通用的二进制安装方法：
首先去 Dapr CLI 的发布页（目前最新是 1.9.1 版本）下载对应操作系统版本的压缩包，命名格式为dapr_&amp;lt;os_name&amp;gt;_&amp;lt;cpu_arch&amp;gt;.(tar.gz|zip)，如果操作系统或者 CPU 架构没选对，则 Dapr CLI 无法正常运行 通常来说 Windows 用户下载dapr_windows_amd64.zip，Linux 用户下载dapr_linux_amd64.tar.gz
解压到任意文件夹，并将该文件夹路径加入PATH环境变量 Linux 用户可直接创建软连接到/usr/local/bin/dapr， Windows 用户推荐将文件解压至%USERPROFILE%\bin\文件夹，并将%USERPROFILE%\bin\添加到PATH环境变量中，后续有其他的可执行文件也可以放入该文件夹，不用再动环境变量
打开控制台或者终端输入dapr，如果有相关的内容输出则安装成功 安装 Dapr Runtime
安装 Dapr Runtime 也叫初始化 Dapr。
本地 Dapr 环境的初始化很简单， 只需要dapr init即可</description></item></channel></rss>